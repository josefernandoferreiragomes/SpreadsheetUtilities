@page "/ganttGeneratorFromPaste"
@inject IGanttChartService GanttChartService
@inject IJSRuntime JS
@rendermode InteractiveServer
@using Newtonsoft.Json
@using SpreadsheetUtility.Library

<PageTitle>Gantt Generator Paste</PageTitle>

<h3>Gantt Generator Paste</h3>

<div>
    <textarea @bind="excelData" placeholder="Paste your Excel data here" rows="10" cols="100"></textarea>
</div>
<div>
    <button @onclick="ConvertToGanttTasks">Convert to Gantt Tasks</button>
</div>

<div>
    <textarea @bind="excelTeamData" placeholder="Paste your team Excel data here" rows="10" cols="100"></textarea>
</div>
<div>
    <button @onclick="ConvertToTeamData">Convert to Team Data</button>
</div>

<p>Tasks Gantt Chart:</p>
<div id="gantt-chart-tasks"></div>

<p>Projects Gantt Chart:</p>
<div id="gantt-chart-projects"></div>

@if (ganttTasks != null)
{
    <h4>Gantt Tasks</h4>
    <pre>@ganttTasksJson</pre>
}

@if (excelTeamData != null)
{
    <h4>Team Data</h4>
    <pre>@teamDataJson</pre>
}

@code {
    private string excelData;
    private List<GanttTask> ganttTasks;
    private string ganttTasksJson;

    private string excelTeamData;
    private List<DeveloperAvailability> teamData;
    private string teamDataJson;

    private string TaskDataJson;
    private string ProjectDataJson;

    private void ConvertToGanttTasks()
    {
        var lines = excelData.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        var tasks = new List<TaskDto>();

        foreach (var line in lines.Skip(1)) // Skip header
        {
            var columns = line.Split('\t');
            if (columns.Length == 8)
            {
                tasks.Add(new TaskDto()
                    {
                        Id = columns[0].Trim(),
                        ProjectID = columns[1].Trim(),
                        ProjectName = columns[2].Trim(),
                        TaskName = columns[3].Trim(),
                        EstimatedEffortHours = double.TryParse(columns[4].Trim(), out var effort) ? effort : 0,
                        Dependencies = columns[5].Trim(),
                        ProjectDependency = columns[6].Trim(),
                        Progress = columns[7].Trim()

                    });
            }
        }
        ganttTasks = GanttChartService.LoadTasksFromDtos(tasks);
        ganttTasksJson = JsonConvert.SerializeObject(ganttTasks, Formatting.Indented);
        //LoadGanttChartTasks(tasks);
    }

    private void ConvertToTeamData()
    {
        var lines = excelTeamData.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        var tasks = new List<DeveloperDto>();

        foreach (var line in lines.Skip(1)) // Skip header
        {
            var columns = line.Split('\t');
            if (columns.Length == 4)
            {
                tasks.Add(new DeveloperDto()
                    {
                        Name = columns[0].Trim(),
                        DailyWorkHours = int.TryParse(columns[1].Trim(), out var hours) ? hours : 0,
                        VacationPeriods = columns[2].Trim(),                        

                    });
            }
        }
        teamData = GanttChartService.LoadTeamDataFromDtos(tasks);
        teamDataJson = JsonConvert.SerializeObject(teamData, Formatting.Indented);
        //LoadGanttChartTasks(tasks);
    }

    // private void LoadGanttChartTasks(List<TaskDto> taskDtoList)
    // {
    //     TaskDataJson = GanttChartService.ProcessExcelDataTasks(taskDtoList, teamDataPath);
    //     //await InvokeAsync(StateHasChanged);
    //     JS.InvokeVoidAsync("renderGanttTasks", TaskDataJson);
    // }

    // private void LoadGanttChartProjects()
    // {
    //     ProjectDataJson = GanttChartService.ProcessExcelDataProjects(taskDataPath, teamDataPath);
    //     //await InvokeAsync(StateHasChanged);
    //     JS.InvokeVoidAsync("renderGanttProjects", ProjectDataJson);
    // }
}
