@page "/ganttGeneratorFromPaste"
@inject IGanttService GanttService
@using Microsoft.JSInterop
@using Newtonsoft.Json
@using SpreadsheetUtility.Library
@using Microsoft.AspNetCore.Components.QuickGrid;
@using SpreadsheetUtility.Services
@using SpreadsheetUtility.UI.Web.Components; <!-- Added namespace for DeveloperAvailabilityColumn -->
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Gantt Generator Paste</PageTitle>

<h3>Gantt Generator Paste</h3>
<div>
    <textarea @bind="excelProjectData" placeholder="Paste your project Excel data here" rows="10" cols="100"></textarea>
</div>
<div>
    <textarea @bind="excelTaskData" placeholder="Paste your task Excel data here" rows="10" cols="100"></textarea>
</div>
<p></p>
<div>
    <textarea @bind="excelTeamData" placeholder="Paste your team Excel data here" rows="10" cols="100"></textarea>
</div>
<p></p>
<div>
    <button @onclick="LoadGanttChartTasks">Load Tasks Gantt Chart</button>
</div>
<div>
    <button @onclick="LoadGanttChartProjects">Load Projects Gantt Chart</button>
</div>
<div>
    <h4>Chart Mode</h4>    
    <InputRadioGroup @bind-Value="chartMode">
        <div>
            <InputRadio Value="ChartMode.Week" /> <label>Week</label>
        </div>
        <div>
            <InputRadio Value="ChartMode.Day" /> <label>Day</label>
        </div>
    </InputRadioGroup>
</div>
<p></p>
<div>
    <label>Pre Sort Tasks</label>
    <InputRadioGroup @bind-Value="preSortTasks">
        <div>
            <InputRadio Value="true" /> <label>Pre Sort Tasks</label>
        </div>
        <div>
            <InputRadio Value="false" /> <label>Do not Pre Sort Tasks</label>
        </div>
    </InputRadioGroup>
</div>
<div>
    <button @onclick="SwapChartMode">Re Generate Charts</button>
</div>
<p></p>
<p>Tasks Gantt Chart:</p>
<div id="gantt-chart-tasks"></div>

<p></p>
<p>Projects Gantt Chart:</p>
<div id="gantt-chart-projects"></div>
<p></p>

<div>Project data</div>
<div>
    <QuickGrid Items="@projectListOutput">
        <PropertyColumn Property="@(p => p.ProjectID)" Sortable="true" />
        <PropertyColumn Property="@(p => p.ProjectName)" Sortable="true" />        
        <PropertyColumn Property="@(p => p.ProjectDependency)" Sortable="true" />
    </QuickGrid>
</div>
<p></p>
<div>Task data</div>
<div>
    <QuickGrid Items="@taskListOutput">
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.StartDate.ToString("dd-MM-yyyy"))" Title="StartDate" Sortable="true" />
        <PropertyColumn Property="@(p => p.EndDate.ToString("dd-MM-yyyy"))" Title="EndDate" Sortable="true" />
        <PropertyColumn Property="@(p => p.TaskEndWeek)" Sortable="true" />
        <PropertyColumn Property="@(p => p.EstimatedEffortHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Dependencies)" Sortable="true" />
        <PropertyColumn Property="@(p => p.InternalID)" Sortable="true" />
    </QuickGrid>
</div>
<div style="margin-top: 10px; font-weight: bold;">
    Total Estimated Effort Hours: @taskListOutput?.Sum(p => p.EstimatedEffortHours)
</div>
<p></p>
<div>Developer data</div>
<div>
    <QuickGrid Items="@developerListOutput">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.DailyWorkHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.AllocatedHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.SlackHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.NextAvailableDateForTasks.ToString("dd-MM-yyyy"))" Title="NextAvailableDateForTasks" Sortable="true" />
        <PropertyColumn Property="@(p => p.VacationPeriodsSerialized)" Sortable="true" />
    </QuickGrid>
</div>
<div style="margin-top: 10px; font-weight: bold;">
    <div>Total Allocated Hours: @developerListOutput?.Sum(p => p.AllocatedHours)</div>
    <div>Total Slack Hours: @developerListOutput?.Sum(p => p.SlackHours)</div>    
</div>
<p></p>
<p></p>
@code {
    enum ChartMode
    {
        Week,
        Day
    }
    private ChartMode chartMode = ChartMode.Week;
    private string excelProjectData = "";    
    private string excelTaskData = "";    
    private List<ProjectDto> projectDtoList = new List<ProjectDto>();
    private List<TaskDto> taskDtoList = new List<TaskDto>();
    private List<DeveloperDto> developerDtoList = new List<DeveloperDto>();
    private IQueryable<Project>? projectListOutput;    
    private IQueryable<GanttTask>? taskListOutput;    
    private string excelTeamData = "";    
    private IQueryable<DeveloperAvailability>? developerListOutput;    
    private bool preSortTasks = true;
    
    private void SwapChartMode()
    {       
        LoadGanttChartTasks();
        LoadGanttChartProjects();
    }

    private void ConvertToGanttProjects()
    {
        var lines = excelTaskData.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        projectDtoList = new List<ProjectDto>();

        foreach (var line in lines.Skip(1)) // Skip header
        {
            var columns = line.Split('\t');
            if (columns.Length == 3)
            {
                projectDtoList.Add(new ProjectDto()
                    {                        
                        ProjectID = columns[0].Trim(),
                        ProjectName = columns[1].Trim(),                        
                        ProjectDependency = columns[2].Trim(),                        

                    });
            }
        }        
    }

    private void ConvertToGanttTasks()
    {
        var lines = excelTaskData.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        taskDtoList = new List<TaskDto>();

        foreach (var line in lines.Skip(1)) // Skip header
        {
            var columns = line.Split('\t');
            if (columns.Length == 9)
            {
                taskDtoList.Add(new TaskDto()
                    {
                        Id = columns[0].Trim(),
                        ProjectID = columns[1].Trim(),
                        ProjectName = columns[2].Trim(),
                        TaskName = columns[3].Trim(),
                        EstimatedEffortHours = double.TryParse(columns[4].Trim(), out var effort) ? effort : 0,
                        Dependencies = columns[5].Trim(),
                        ProjectDependency = columns[6].Trim(),
                        Progress = columns[7].Trim(),
                        InternalID = columns[8].Trim()

                    });
            }
        }        
    }

    private void ConvertToTeamData()
    {
        var lines = excelTeamData.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        developerDtoList = new List<DeveloperDto>();

        foreach (var line in lines.Skip(1)) // Skip header
        {
            var columns = line.Split('\t');
            if (columns.Length == 4)
            {
                developerDtoList.Add(new DeveloperDto()
                    {
                        Team = columns[0].Trim(),
                        Name = columns[1].Trim(),
                        VacationPeriods = columns[2].Trim(),                        
                        DailyWorkHours = int.TryParse(columns[3].Trim(), out var hours) ? hours : 0,

                    });
            }
        }        
    }   

    private void LoadGanttChartTasks()
    {
        ConvertToGanttProjects();
        ConvertToGanttTasks();
        ConvertToTeamData();      
        var input = new GanttChartAllocationInput
        {
            TaskDtos = taskDtoList,
            DeveloperDtos = developerDtoList,
            ProjectDtos = projectDtoList,
            PreSortTasks = preSortTasks
        };
        var ganttChartAllocation = GanttService.CalculateGanttChartAllocationFromDtos(input);
        taskListOutput = ganttChartAllocation.GanttTasks.AsQueryable();
        developerListOutput = ganttChartAllocation.DeveloperAvailability.AsQueryable();
        projectListOutput = ganttChartAllocation.ProjectList.AsQueryable();       

        JS.InvokeVoidAsync("renderGanttTasks", JsonConvert.SerializeObject(taskListOutput, Formatting.Indented), chartMode.ToString(), "true");
    }

    private void LoadGanttChartProjects()
    {
        var projectData = GanttService.AssignProjectsFromDtos(taskDtoList, developerDtoList, preSortTasks);
        JS.InvokeVoidAsync("renderGanttProjects", JsonConvert.SerializeObject(projectData, Formatting.Indented), chartMode.ToString(), "true");
    }
    
}
