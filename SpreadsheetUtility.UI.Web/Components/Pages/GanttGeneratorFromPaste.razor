@page "/ganttGeneratorFromPaste"
@inject IGanttChartDataManager GanttService
@using Microsoft.JSInterop
@using Newtonsoft.Json
@using SpreadsheetUtility.Library
@using Microsoft.AspNetCore.Components.QuickGrid;
@using SpreadsheetUtility.Library.Models
@using SpreadsheetUtility.Library.Services
@using SpreadsheetUtility.UI.Web.Components;
@using SpreadsheetUtility.UI.Web.Helpers
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@inject IJSRuntime JS
@rendermode InteractiveServer                  
<h3>Gantt Generator Paste</h3>
<!--i need to create divs around these labels-->
<div>
    <label>Projects</label>
</div>
<div>
    <label>Project groups will have their assigned tasks in order. The tasks for the next project will be assigned upon completion of the previous project group.</label>
</div>
<div>
    <label>The properly ordered project groups will represent dependencies... first, project group 1, then, project group 2</label>
</div>
<div>
    <label>Project groups are represented by the project group column in the project data</label>
</div>
<div>
    <label>If there is only one project group, the task assignment efficiency will be maximized</label>
</div>
<div>
    <textarea @bind="excelProjectData" placeholder="Paste your project Excel data here" rows="10" cols="100"></textarea>
</div>
<p></p>
<div>
    <label>Tasks</label>
</div>
<div>
    <label>Dependencies (experimental) can only exist within the same project. As the project dependencies are represented by ordered project groups above</label>
</div>
<div>
    <label>Dependencies are represented by the internal ID of the task. As if there are dependencies, it is recommended to pre sort the tasks</label>
</div>
<div>
    <label>Progress is a percentage</label>
</div>
<div>
    <textarea @bind="excelTaskData" placeholder="Paste your task Excel data here" rows="10" cols="100"></textarea>
</div>
<p></p>
<div>
    <label>Team</label>
</div>
<div>
    <label>Team members will be assigned tasks based on their availability and daily work hours</label>
</div>
<div>
    <label>Developer vacation date intervals are composed by two comma separated dates. Intervals are pipe separated</label>
</div>
<div>
    <textarea @bind="excelTeamData" placeholder="Paste your team Excel data here" rows="10" cols="100"></textarea>
</div>
<p></p>
<div>
    <label>Projects start Date</label>
    <InputDate @bind-Value="projectStartDate" />
</div>
<p></p>
<div>
    <button @onclick="LoadGanttChartTasks">Load Tasks Gantt Chart</button>
</div>
<div>
    <h4>Chart Mode</h4>    
    <InputRadioGroup @bind-Value="chartMode">
        <div>
            <InputRadio Value="ChartMode.Week" /> <label>Week</label>
        </div>
        <div>
            <InputRadio Value="ChartMode.Day" /> <label>Day</label>
        </div>
    </InputRadioGroup>
</div>
<div>
    <label>Pre Sort Tasks by project group (useful if there are dependencies, but it is experimental)</label>
    <InputRadioGroup @bind-Value="preSortTasks">
        <div>
            <InputRadio Value="true" /> <label>Pre Sort Tasks</label>
        </div>
        <div>
            <InputRadio Value="false" /> <label>Do not Pre Sort Tasks</label>
        </div>
    </InputRadioGroup>
</div>
<div>
    <label>Team to Project Group Task Assignment (experimental)</label>
    <InputRadioGroup @bind-Value="setTeamsToProjectGroups">
        <div>
            <InputRadio Value="true" /> <label>Fix Team To Project Group</label>
        </div>
        <div>
            <InputRadio Value="false" /> <label>Do not Fix Team</label>
        </div>
    </InputRadioGroup>
</div>
<div>
    <button @onclick="SwapChartMode">Re Generate Charts</button>
</div>
<p></p>
<p>Tasks Gantt Chart:</p>
<div id="gantt-chart-tasks"></div>
<p></p>
<p>Projects Gantt Chart:</p>
<div id="gantt-chart-projects"></div>
<p></p>
<p>Developer Tasks Gantt Chart:</p>
<div id="developer-gantt-chart-tasks"></div>
<p></p>
<div>Project data</div>
<div>
    <QuickGrid Items="@projectListOutput">
        <PropertyColumn Property="@(p => p.ProjectID)" Sortable="true" />
        <PropertyColumn Property="@(p => p.ProjectName)" Sortable="true" />      
        <PropertyColumn Property="@(p => p.StartDate.ToString("dd-MM-yyyy"))" Title="StartDate" Sortable="true" />
        <PropertyColumn Property="@(p => p.EndDate.ToString("dd-MM-yyyy"))" Title="EndDate" Sortable="true" />
        <PropertyColumn Property="@(p => p.TotalEffortHours)" Sortable="true" />                      
        <PropertyColumn Property="@(p => p.ProjectGroup)" Sortable="true" />
        <PropertyColumn Property="@(p => p.TeamId)" Sortable="true" />
    </QuickGrid>
</div>
<div class="card-footer">
    Total Estimated Effort Hours: @projectListOutput?.Sum(p => p.TotalEffortHours)
</div>
<p></p>
<div>Task data</div>
<div>
    <QuickGrid Items="@ganttTaskListOutput">
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.TaskExtendedDescription)" Sortable="true" />
        <PropertyColumn Property="@(p => p.ProjectName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.AssignedDeveloper)" Sortable="true" />
        <PropertyColumn Property="@(p => p.StartDate.ToString("dd-MM-yyyy"))" Title="StartDate" Sortable="true" />
        <PropertyColumn Property="@(p => p.EndDate.ToString("dd-MM-yyyy"))" Title="EndDate" Sortable="true" />
        <PropertyColumn Property="@(p => p.TaskEndWeekDescriptionDescription)" Sortable="true" />
        <PropertyColumn Property="@(p => p.EffortHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.IntervalDays)" Sortable="true" />
        <PropertyColumn Property="@(p => p.WorkDays)" Sortable="true" />
        <PropertyColumn Property="@(p => p.VacationDays)" Sortable="true" />
        <PropertyColumn Property="@(p => p.NonWorkingDays)" Sortable="true" />
        <PropertyColumn Property="@(p => p.DailyWorkHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Dependencies)" Sortable="true" />
        <PropertyColumn Property="@(p => p.InternalID)" Sortable="true" />
    </QuickGrid>
</div>
<div class="card-footer">
    <div>Total Estimated Effort Hours: @ganttTaskListOutput?.Sum(p => p.EffortHours)</div>
    <div>Total Work Days: @ganttTaskListOutput?.Sum(p => p.WorkDays)</div>
</div>
<p></p>
<div>Developer data</div>
<div>
    <QuickGrid Items="@developerListOutput">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.DailyWorkHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.AllocatedDays)" Sortable="true" />
        <PropertyColumn Property="@(p => p.AllocatedHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.SlackHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.TotalHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.NextAvailableDateForTasks.ToString("dd-MM-yyyy"))" Title="NextAvailableDateForTasks" Sortable="true" />
        <PropertyColumn Property="@(p => p.VacationPeriodsSerialized)" Sortable="true" />
    </QuickGrid>
</div>
<div class="card-footer">
    <div>Total Allocated Hours: @developerListOutput?.Sum(p => p.AllocatedHours)</div>
    <div>Total Slack Hours: @developerListOutput?.Sum(p => p.SlackHours)</div>    
    <div>Total Hours Within projects: @developerListOutput?.Sum(p => p.TotalHours)</div>        
    <div>Total Days Within projects: @developerListOutput?.Sum(p => p.AllocatedDays)</div>        
</div>
<p></p>
<div>Holidays in projects</div>
<div>
    <QuickGrid Items="@projectHolidayList">
        <PropertyColumn Property="@(p => p.Date.ToString("dd-MM-yyyy"))" Sortable="true" />
        <PropertyColumn Property="@(p => p.HolidayDescription)" Sortable="true" />
    </QuickGrid>
</div>
<div class="card-footer">  
    <div>Total Holidays in Projects: @projectHolidayList?.Count()</div>
</div>
<p></p>
@code {
    enum ChartMode
    {
        Week,
        Day
    }
    private DateTime projectStartDate = DateTime.Today;
    private ChartMode chartMode = ChartMode.Week;
    private string excelProjectData = "";    
    private string excelTaskData = "";    
    private List<ProjectDto> projectDtoList = new List<ProjectDto>();
    private List<TaskDto> taskDtoList = new List<TaskDto>();
    private List<DeveloperDto> developerDtoList = new List<DeveloperDto>();
    private IQueryable<Holiday>? projectHolidayList;
    private IQueryable<Project>? projectListOutput;    
    private IQueryable<GanttTask>? ganttTaskListOutput;    
    private IQueryable<GanttTask>? ganttProjectListOutput;    
    private IQueryable<GanttTask>? developerGanttTaskListOutput;

    private string excelTeamData = "";    
    private IQueryable<DeveloperAvailability>? developerListOutput;    
    private bool preSortTasks = false;
    private bool setTeamsToProjectGroups = false;

    private void SwapChartMode()
    {       
        LoadGanttChartTasks();        
    }        

    private void LoadGanttChartTasks()
    {
        projectDtoList = GanttMapperHelper.ConvertToGanttProjects(excelProjectData);
        taskDtoList = GanttMapperHelper.ConvertToGanttTasks(excelTaskData);
        developerDtoList = GanttMapperHelper.ConvertToTeamData(excelTeamData);

        var input = new CalculateGanttChartAllocationInput
        {
            DeveloperDtos = developerDtoList,
            ProjectDtos = projectDtoList,
            TaskDtos = taskDtoList,
            PreSortTasks = preSortTasks,
            ProjectStartDate = projectStartDate,
            SetTeamsToProjectGroups = setTeamsToProjectGroups,
        };

        var inputMessageLog = $"input: {JsonConvert.SerializeObject(input, Formatting.Indented)}";
        this.JS.InvokeVoidAsync("console.log", inputMessageLog);

        var ganttChartAllocation = GanttService.CalculateGanttChartAllocation(input);
        
        var outputMessageLog = $"output: {JsonConvert.SerializeObject(ganttChartAllocation, Formatting.Indented)}";
        this.JS.InvokeVoidAsync("console.log", outputMessageLog);

        ganttTaskListOutput = ganttChartAllocation.GanttTasks.AsQueryable();
        developerListOutput = ganttChartAllocation.DeveloperAvailability.AsQueryable();
        projectListOutput = ganttChartAllocation.ProjectList.AsQueryable();       
        projectHolidayList = ganttChartAllocation.HolidayList.AsQueryable();
        ganttProjectListOutput = ganttChartAllocation.GanttProjects.AsQueryable();
        developerGanttTaskListOutput = ganttChartAllocation.DeveloperGanttTaskList.AsQueryable();

        GanttColorHelper.SetupProjectColor(ganttProjectListOutput, ganttTaskListOutput);
        GanttColorHelper.SetupDeveloperColor(developerListOutput, developerGanttTaskListOutput);

        JS.InvokeVoidAsync("renderGanttTasks", JsonConvert.SerializeObject(ganttTaskListOutput, Formatting.Indented), chartMode.ToString(), "true");
        JS.InvokeVoidAsync("renderGanttProjects", JsonConvert.SerializeObject(ganttProjectListOutput, Formatting.Indented), chartMode.ToString(), "true");
        JS.InvokeVoidAsync("renderDeveloperGanttTasks", JsonConvert.SerializeObject(developerGanttTaskListOutput, Formatting.Indented), chartMode.ToString(), "true");
    }    
    
}
