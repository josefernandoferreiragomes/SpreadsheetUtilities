@page "/ganttGeneratorFromPaste"
@inject IGanttService GanttService
@using Microsoft.JSInterop
@using Newtonsoft.Json
@using SpreadsheetUtility.Library
@using Microsoft.AspNetCore.Components.QuickGrid;
@using SpreadsheetUtility.Services
@using SpreadsheetUtility.UI.Web.Components; <!-- Added namespace for DeveloperAvailabilityColumn -->
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Gantt Generator Paste</PageTitle>

<h3>Gantt Generator Paste</h3>

<div>
    <textarea @bind="excelData" placeholder="Paste your Excel data here" rows="10" cols="100"></textarea>
</div>
<p></p>
<div>
    <textarea @bind="excelTeamData" placeholder="Paste your team Excel data here" rows="10" cols="100"></textarea>
</div>
<p></p>
<div>
    <button @onclick="LoadGanttChartTasks">Load Tasks Gantt Chart</button>
</div>
<div>
    <button @onclick="LoadGanttChartProjects">Load Projects Gantt Chart</button>
</div>
<div>
    <button @onclick="SwapChartMode">Swap Chart Mode</button>
    <h4>Chart Mode</h4>
    <pre>@chartMode</pre>
</div>
<p></p>
<p>Tasks Gantt Chart:</p>
<div id="gantt-chart-tasks"></div>

<p></p>
<p>Projects Gantt Chart:</p>
<div id="gantt-chart-projects"></div>
<p></p>

<div>Project data</div>
<div>
    <QuickGrid Items="@taskOutput">
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.StartDate.ToString("dd-MM-yyyy"))" Sortable="true" />
        <PropertyColumn Property="@(p => p.EndDate.ToString("dd-MM-yyyy"))" Sortable="true" />
        <PropertyColumn Property="@(p => p.EstimatedEffortHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Dependencies)" Sortable="true" />
    </QuickGrid>
</div>

<div>Developer data</div>
<div>
    <QuickGrid Items="@developerOutput">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.DailyWorkHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.AllocatedHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.SlackHours)" Sortable="true" />
        <PropertyColumn Property="@(p => p.NextAvailableDateForTasks.ToString("dd-MM-yyyy"))" Sortable="true" />        
        <PropertyColumn Property="@(p => p.VacationPeriodsSerialized)" Sortable="true" />
    </QuickGrid>
</div>
<p></p>
<p>Logging:</p>
<p></p>
<p></p>
@if (ganttTasks != null)
{
    <h4>Gantt Tasks</h4>
    <pre>@ganttTasksJson</pre>
}

@if (excelTeamData != null)
{
    <h4>Team Data</h4>
    <pre>@teamDataJson</pre>
}

@code {
    private string chartMode = "Week";
    private string excelData = "";
    private List<TaskDto> taskDtos = new List<TaskDto>();
    private List<GanttTask> ganttTasks = new List<GanttTask>();
    private IQueryable<GanttTask>? taskOutput;
    private string ganttTasksJson = "";

    private string excelTeamData = "";
    private List<DeveloperDto> developerDtos = new List<DeveloperDto>();
    private List<DeveloperAvailability> teamData = new List<DeveloperAvailability>();
    private IQueryable<DeveloperAvailability>? developerOutput;
    private string teamDataJson = "";
    private GanttChartAllocation GanttChartAllocation = new GanttChartAllocation();

    private void SwapChartMode()
    {
        if (chartMode == "Week")
        {
            chartMode = "Day";
        }
        else if(chartMode == "Day")
        {
            chartMode = "Week";
        }
        LoadGanttChartTasks();
        LoadGanttChartProjects();
    }

    private void ConvertToGanttTasks()
    {
        var lines = excelData.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        taskDtos = new List<TaskDto>();

        foreach (var line in lines.Skip(1)) // Skip header
        {
            var columns = line.Split('\t');
            if (columns.Length == 8)
            {
                taskDtos.Add(new TaskDto()
                    {
                        Id = columns[0].Trim(),
                        ProjectID = columns[1].Trim(),
                        ProjectName = columns[2].Trim(),
                        TaskName = columns[3].Trim(),
                        EstimatedEffortHours = double.TryParse(columns[4].Trim(), out var effort) ? effort : 0,
                        Dependencies = columns[5].Trim(),
                        ProjectDependency = columns[6].Trim(),
                        Progress = columns[7].Trim()

                    });
            }
        }
        ganttTasks = GanttService.LoadTasksFromDtos(taskDtos);
        ganttTasksJson = JsonConvert.SerializeObject(ganttTasks, Formatting.Indented);
    }

    private void ConvertToTeamData()
    {
        var lines = excelTeamData.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        developerDtos = new List<DeveloperDto>();

        foreach (var line in lines.Skip(1)) // Skip header
        {
            var columns = line.Split('\t');
            if (columns.Length == 4)
            {
                developerDtos.Add(new DeveloperDto()
                    {
                        Team = columns[0].Trim(),
                        Name = columns[1].Trim(),
                        VacationPeriods = columns[2].Trim(),                        
                        DailyWorkHours = int.TryParse(columns[3].Trim(), out var hours) ? hours : 0,

                    });
            }
        }
        teamData = GanttService.LoadDeveloperAvailabilityFromDtos(developerDtos);
        teamDataJson = JsonConvert.SerializeObject(teamData, Formatting.Indented);
    }   

    private void LoadGanttChartTasks()
    {
        ConvertToGanttTasks();
        ConvertToTeamData();      
        GanttChartAllocation = GanttService.CalculateGanttChartAllocationFromDtos(taskDtos, developerDtos);
        taskOutput = GanttChartAllocation.GanttTasks.AsQueryable();
        developerOutput = GanttChartAllocation.DeveloperAvailability.AsQueryable();       
        JS.InvokeVoidAsync("renderGanttTasks", JsonConvert.SerializeObject(taskOutput, Formatting.Indented), chartMode, "true");
    }

    private void LoadGanttChartProjects()
    {
        var projectData = GanttService.AssignProjectsFromDtos(taskDtos, developerDtos);     
        JS.InvokeVoidAsync("renderGanttProjects", JsonConvert.SerializeObject(projectData, Formatting.Indented), chartMode, "true");
    }
    
}
